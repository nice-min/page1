--- 
layout: default 
title: Tutorial
description: 이 문서는 Mobello UI Framework을 이용한 App 개발 과정을 간략하게 소개합니다.
keywords: Mobello, mobello, 모벨로, HTML5, javascript, CSS3, mobile, UI Framework, tutorial, Tutorial,튜토리얼, 강의
---

h2. Before you start

샘플로 개발할 App은 "Hello Mobello Framework!"을 아이폰 화면에 출력하는 간단한 프로그램입니다. 먼저 App을 개발하기 전에 선행해야할 간단한 작업들을 소개합니다.

h4. 1. App 폴더 생성

개발할 App 이름을 'firstapp'이라 하고 다음과 같이 Mobello UI Framework의 [apps]폴더에서 [firstapp]이라는 새로운 폴더를 생성합니다. 앞으로 개발하게 될 App은 이 폴더에 저장됩니다.

<pre class="prettyprint">
[Mobello Framework]
  +-[apps]
  |  +-[firstapp]  <- newly created folder!
  |  +- ... (sample apps)
  +-[lib]
  +-[shared]
  +-config.json
  +-launcher.html
</pre>

h4. 2. 환경설정

새로 생성한 [firstapp]폴더에 환경설정 파일인 config.json을 생성합니다. 이 파일은 일반 텍스트 파일이며 다음과 같은 내용을 입력합니다.

<pre class="prettyprint">
config({
  classname: 'sample.FirstAppController'
});
</pre>

위의 환경설정은 App이 실행했을 때 로딩할 클래스의 이름을 지정합니다. 이제 위의 환경파일에 명시된 클래스를 정의하기 위한 자바스크립트 소스파일을 생성합니다.

h4. 3. 소스파일 생성

[firstapp] 폴더에 App 개발을 위한 소스파일을 생성합니다. 이때 소스파일의 이름은 main.js로 지정합니다. main.js파일은 Mobello UI Framework이 실행되었을 때 처음으로 로딩되는 소스파일입니다. 위의 과정을 모두 마치면 다음과 같은 폴더 구조를 가집니다.

<pre class="prettyprint">
[Mobello Framework]
  +-[apps]
  |  +-[firstapp]  <- newly created folder!
  |  |  +- main.js
  |  |  +- config.json
  |  +- ... (sample apps)
  +-[lib]
  +-[shared]
  +-config.json
  +-launcher.html
</pre>

Mobello UI Framework을 이용하여 App을 개발하기 위한 환경 설정은 모두 끝났습니다. 이제 실제 App을 개발해 보도록 하겠습니다.

참고: Mobello UI Framework 통합 개발환경(IDE)을 이용하면 이 과정을 자동화된 방법으로진행할 수 있습니다.

h2. Let's hit the road!

먼저 앞에서 생성한 main.js파일을 열고 config.json 파일에 설정한 FirstAppController 클래스를 생성합니다. 이때 네임스페이스를 sample로 하겠습니다. 생성한 sample.FirstAppController의 코드는 다음과 같습니다.

h5. main.js

<pre class="prettyprint">
$class('sample.FirstAppController').extend(tau.ui.SceneController).define({
  loadScene: function () {
 
  }
});
</pre>

아이폰 화면에 그려질 UI는 위에서 정의한 loadScene() 메소드를 통해 생성합니다.

h4. Creating Interfaces

다음 코드와 같이 Label 컴포넌트 클래스를 이용하여 먼저 객체를 생성합니다. 이때 생성자의 파라미터로 'Hello Mobello!' 문자열을 설정하고, 화면 위에서 부터 50px 떨어져서 출력되도록 합니다. 다음으로 생성된 Label 객체를 Scene에 추가 합니다.

h5. main.js

<pre class="prettyprint">
$class('sample.FirstAppController').extend(tau.ui.SceneController).define({
  loadScene: function () {
    var scene = this.getScene();
    var label = new tau.ui.Label({text: 'Hello Mobello!', styles: {top: '50px'}});
    scene.add(label);
  }
});
</pre>

간단한 코드만으로 문자열을 출력하는 App을 완성했습니다. 그럼 이제 아이폰으로 실행해보도록 하겠습니다. 개발된 App을 아이폰에서 실행하기 위해서는 톰켓과 같은 Web서버가 설치되어 있어야 합니다. 
먼저 아이폰의 Safari 브라우저를 실행한 다음 주소창에 아래와 같이 URL을 입력합니다

<pre class="prettyprint">
http://localhost:8080/tau/launcher.html?app=firstapp
</pre>

정상적으로 실행되면 다음과 같은 결과가 출력됩니다.

!{width:250px}http://media.tumblr.com/tumblr_m2zawoRk821rnkrh8.jpg!

이제 좀 더 확장해서 단순히 문자열을 출력하는 형태가 아니라 사용자의 입력에 반응할 수 있도록 기능을 추가해 보겠습니다. 사용자의 입력을 위해 버튼 하나를 만들고 이 버튼을 눌렀을 때 현재 출력된 문자열이 다른 문자로 변경되록 수정하겠습니다. 먼저 버튼 컴포넌트 클래스를 이용해서 Change문자열로 라벨을 설정하고 화면 위로 부터 100px 떨어진 위치에 출력되도록 추가합니다.

h5. main.js

<pre class="prettyprint">
$class('sample.FirstAppController').extend(tau.ui.SceneController).define({
  loadScene: function () {
    var scene = this.getScene();
    var label = new tau.ui.Label({text: 'Hello Mobello!', styles: {top: '50px'}});
    scene.add(label);
 
    var button = new tau.ui.Button({label: 'Change', styles: {top: '100px'}});
    scene.add(button);
  }
});
</pre>

다음으로 이 버튼이 터치되었을 때 발생하는 탭 이벤트를 처리하도록 buttonTapped 이벤트 핸들러 메소드를 FirstAppController에 추가하고 탭 이벤트의 핸들러로 등록합니다. 탭 이벤트 핸들러 메소드에서 사용자가 버튼을 터치할 때 마다 문자열을 변경하는 로직도 같이 추가합니다.

h5. main.js

<pre class="prettyprint">
$class('sample.FirstAppController').extend(tau.ui.SceneController).define({
 
  loadScene: function () {
    var scene = this.getScene();
    var label = new tau.ui.Label({text: 'Hello Mobello!', styles: {top: '50px'}});
    scene.add(label);
 
    var button = new tau.ui.Button({label: 'Change', styles: {top: '100px'}});
    // register buttonTapped method as a tap event handler
    button.onEvent(tau.rt.Event.TAP, this.buttonTapped, this);
    scene.add(button);
  },
 
  buttonTapped: function (event, payload) {
    var scene = this.getScene();
    var label = scene.getComponent(0);
 
    var text = label.getText();
    text = (text == 'Hello Mobello!') ? 'Hello World!' : 'Hello Mobello!';
    label.setText(text);
  }
});
</pre>

buttonTapped이벤트 핸들러에서 Scene에 0번째 인덱스로 등록된 컴포넌트(Label)를 얻어온 다음 현재 설정된 텍스트에 따라 "Hello Mobello!" 또는 "Hello World!" 가 출력되도록 구현했습니다.
완성된 App을 아이폰으로 실행하면 다음과 같은 결과가 출력됩니다.

!{width:250px}/img/firstapp2.png!

버튼을 터치할 때마다 Label 컴포넌트에 설정된 텍스트가 변경되는 것을 확인할 수 있습니다.

h2. Using the Debugger

개발을 진행하면서 오류로 인해 App이 정상적으로 동작하지 않는 상황이 발생할 수 있습니다. 일반적으로 오류가 발생하면 자바스크립트에서 제공되는 alert() 메소드를 이용하지만 브라우저에서 제공하는 Debugger 기능을 이용하면 훨씬 더 효율적으로 원인을 파악하고 오류를 수정할 수 있습니다. 크롬 브라우저에서 제공되는 Debugger는 다음 그림과 같습니다.

!{width:600px}/img/debugger.png!

디버깅 기능을 어떻게 활용하는지 설명하기 위해 인위적으로 오류를 코드에 삽입하도록 하겠습니다. 위의 코드에서 scene.getComponent(0); 메소드에 사용된 파라미터를 "3" 으로 변경하고 실행해보면 버튼을 터치하더라도 텍스트가 변경되지 않는 것을 확인할 수 있습니다. 이와 같이 App이 정상적으로 동작하지 않을 경우 일반적으로 이벤트 핸들러인 buttonTapped 메소드에 문제가 있음을 예측할 수 있습니다. 브라우저에서 제공하는 Debugger를 실행하고 다음과 같이 이벤트 핸들러 메소드 부분에 Breakpoint를 설정합니다.

!{width:600px}/img/breakpoint.png!

그런 다음 실행된 App에서 버튼을 터치하면 설정한 breakpoint에서 실행이 중지된 것을 확인할 수 있습니다.

!{width:600px}/img/breakpoint2.png!

이 상태에서  !/img/stepover.png! 또는 F10 키를 눌러 다음 단계로 하나씩 진행하면서 각 변수에 어떤 값이 할당되고 있는지 확인 할 수 있습니다.

!{width:600px}/img/breakpoint3.png!

이와 같이 진행하면서 오류의 원인을 파악할 수 있습니다. 위의 경우에는 16라인에서 scene.getComponent(3);로 가져온 Label컴포넌트가 존재하지 않아(undefined) 발생되는 오류임을 확인할 수 있습니다. 원인이 파악되면 소스코드에서 해당 오류를 수정하고 앞에서 설정한 breakpoint를 해제한 다음 실행하면 됩니다.